version: "3"

networks:
  swarm-network:
    driver: overlay

services:
  helloworld:
    image: nginxdemos/hello
    networks:
      - swarm-network
    ports:
      - "8080:80"
    deploy:
      restart_policy:
        delay: 1h
      placement:
        constraints:
          - node.labels.gateway == true
  postgres:
    image: {{ postgres_image }}
    ports:
      - 5432:5432
    networks:
      - swarm-network
    environment:
      POSTGRES_PASSWORD: {{ postgres_password }}
      POSTGRES_USER: {{ postgres_user }}
    volumes:
      - {{ swarm_deployments_data_path }}/postgres:/var/lib/postgresql/data
      - {{ swarm_deployments_data_path }}/scripts/init_postgres.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      restart_policy:
        delay: 5s
      placement:
        constraints:
          - node.labels.data == true
  kong:
    image: {{ kong_image }}
    ports:
      - 8000:8000
      - 8001:8001
    networks:
      - swarm-network
    environment:
      KONG_PG_PASSWORD: {{ postgres_kong_password }}
      KONG_DATABASE: {{ kong_database }}
      KONG_PG_HOST: postgres
    command: bash -c "kong migrations up -v && kong start"
    deploy:
      restart_policy:
        delay: 30s
      placement:
        constraints:
          - node.labels.gateway == true
  kong-api-gateway:
    image: {{ kong_api_gateway_docker_image }}
    ports:
      - 8888:80
    networks:
      - swarm-network
    deploy:
      restart_policy:
        delay: 360s
  kong-docs:
    image: alpine
    networks:
      - swarm-network
    command: sh -c "apk add curl && curl --fail -X PUT -d \"name=swagger-docs&uris=/&upstream_url=http://kong-api-gateway:8888\" http://kong:8001/apis/"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 360s
  rabbitmq:
    image: {{ rabbitmq_image }}
    ports:
      - 5672:5672
    networks:
      - swarm-network
    deploy:
      restart_policy:
        delay: 5s
  redis:
    image: {{ redis_image }}
    ports:
      - 6379
    networks:
      - swarm-network
    deploy:
      restart_policy:
        delay: 5s
  resourcecataloguer:
    image: "{{ resource_cataloguer_docker_image }}"
    ports:
      - "{{ resource_cataloguer_port }}:{{ resource_cataloguer_port }}"
    command: /bin/sh -c "bundle exec rake db:create && bundle exec rake db:migrate && bundle exec puma -p {{ resource_cataloguer_port }} -C config/puma.rb -e production"
    environment:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MAX_THREADS: 200
      POSTGRES_HOST: "postgres"
      POSTGRES_PORT: 5432
      POSTGRES_USER: "{{ postgres_rescat_user }}"
      POSTGRES_PASSWORD: "{{ postgres_rescat_password }}"
      SECRET_KEY_BASE: "{{ secret_key_base }}"
      RABBITMQ_HOST: "rabbitmq"
      REGISTER_METHOD: "target"
      KONG_URI: "http://{{ kong }}:{{ kong_admin_port }}"
      SELF_HOST: "resourcecataloguer:{{ resource_cataloguer_port }}"
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
    networks:
      - swarm-network
    deploy:
      restart_policy:
        delay: 480s
  resourceadaptor-sidekiq:
    image: {{ resource_adaptor_docker_image }}
    deploy:
      restart_policy:
        delay: 480s
    networks:
      - swarm-network
    command: bundle exec sidekiq -C config/sidekiq.yml
    environment:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MAX_THREADS: 200
      POSTGRES_HOST: postgres
      POSTGRES_PORT: "{{ postgres_port }}"
      POSTGRES_USER: "{{ postgres_resadapt_user }}"
      POSTGRES_PASSWORD: "{{ postgres_resadapt_password }}"
      SECRET_KEY_BASE: "{{ secret_key_base }}"
      RABBITMQ_HOST: rabbitmq
      CATALOGUER_HOST: "kong:{{ kong_port }}/catalog"
      REGISTER_METHOD: "none"
      ADAPTOR_HOST: "kong:{{ kong_port }}/adaptor"
      KONG_URI: "http://kong:{{ kong_admin_port }}"
      SELF_HOST: "resourceadaptor-sidekiq:{{ resource_adaptor_port }}"
      REDIS_HOST: "redis://redis"
      REDIS_PORT: 6379
  resourceadaptor:
    image: {{ resource_adaptor_docker_image }}
    deploy:
      restart_policy:
        delay: 480s
    networks:
      - swarm-network
    ports:
      - "{{ resource_adaptor_port }}:{{ resource_adaptor_port }}"
    command: /bin/sh -c "bundle exec rake db:create && bundle exec rake db:migrate && bundle exec puma -p {{ resource_adaptor_port }} -C config/puma.rb -e production"
    environment:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MAX_THREADS: 200
      POSTGRES_HOST: postgres
      POSTGRES_PORT: "{{ postgres_port }}"
      POSTGRES_USER: "{{ postgres_resadapt_user }}"
      POSTGRES_PASSWORD: "{{ postgres_resadapt_password }}"
      SECRET_KEY_BASE: "{{ secret_key_base }}"
      RABBITMQ_HOST: rabbitmq
      CATALOGUER_HOST: "kong:{{ kong_port }}/catalog"
      REGISTER_METHOD: "target"
      ADAPTOR_HOST: "kong:{{ kong_port }}/adaptor"
      KONG_URI: "http://kong:{{ kong_admin_port }}"
      SELF_HOST: "resourceadaptor:{{ resource_adaptor_port }}"
      REDIS_HOST: "redis://redis"
      REDIS_PORT: 6379
  mongodb:
    image: {{ mongodb_image }}
    ports:
      - 27017:27017
    networks:
      - swarm-network
    deploy:
      restart_policy:
        delay: 5s
    environment:
      AUTH: "no"
  datacollector:
    image: {{ data_collector_docker_image }}
    ports:
      - "{{ data_collector_port }}:{{ data_collector_port }}"
    deploy:
      restart_policy:
        delay: 480s
    networks:
      - swarm-network
    command: /bin/sh -c "bundle exec rake db:mongoid:remove_indexes db:mongoid:create_indexes && bundle exec puma -p {{ data_collector_port }} -C config/puma.rb -e production"
    environment:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MAX_THREADS: 200
      MONGO_USER: "{{ mongo_user }}"
      MONGO_PASSWORD: "{{ mongo_password }}"
      MONGO_HOST: mongodb
      MONGO_PORT: "{{ mongo_port }}"
      MONGO_CACHE_HOST: mongodb
      MONGO_CACHE_PORT: "{{ mongo_port }}"
      SECRET_KEY_BASE: "{{ secret_key_base }}"
      RABBITMQ_HOST: rabbitmq
      REGISTER_METHOD: "target"
      KONG_URI: "http://kong:{{ kong_admin_port }}"
      SELF_HOST: "datacollector:{{ data_collector_port }}"
  resourcediscoverer:
    image: {{ resource_discoverer_docker_image }}
    deploy:
      restart_policy:
        delay: 480s
    networks:
      - swarm-network
    ports:
      - "{{ resource_discoverer_port }}:{{ resource_discoverer_port }}"
    command: bundle exec puma -p "{{ resource_discoverer_port }}" -C config/puma.rb -e production
    environment:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MAX_THREADS: 200
      SECRET_KEY_BASE: "{{ secret_key_base }}"
      RABBITMQ_HOST: rabbitmq
      CATALOGUER_HOST: "kong:{{ kong_port }}/catalog"
      DATACOLLECTOR_HOST: "kong:{{ kong_port }}/collector"
      REGISTER_METHOD: "target"
      KONG_URI: "http://kong:{{ kong_admin_port }}"
      SELF_HOST: "resourcediscoverer:{{ resource_discoverer_port }}"
  actuatorcontroller:
    image: {{ actuator_controller_docker_image }}
    deploy:
      restart_policy:
        delay: 480s
    networks:
      - swarm-network
    ports:
      - "{{ actuator_controller_port }}:{{ actuator_controller_port }}"
    command: bundle exec puma -p "{{ actuator_controller_port }}" -C config/puma.rb -e production
    environment:
      RAILS_ENV: "{{ rails_env }}"
      RAILS_MAX_THREADS: 200
      MONGO_USER: "{{ mongo_user }}"
      MONGO_PASSWORD: "{{ mongo_password }}"
      MONGO_HOST: mongodb
      MONGO_PORT: "{{ mongo_port }}"
      SECRET_KEY_BASE: "{{ secret_key_base }}"
      RABBITMQ_HOST: rabbitmq
      REGISTER_METHOD: "target"
      KONG_URI: "http://kong:{{ kong_admin_port }}"
      SELF_HOST: "actuatorcontroller:{{ actuator_controller_port }}"
