require 'rails_helper'

describe Detail, :type => :model do

  pending "add some examples to (or delete) #{__FILE__}"

  let(:detail) { create(:detail) }

  it "has a valid factory" do
    expect(detail).to be_valid
  end

  it "is generated by a component" do
    # It should already be registered by the Resource Adaptor, hence the "not nil"
    expect(detail.component_uuid).not_to be_nil
    expect(detail.capability).not_to eq('')
    expect(FactoryGirl.build(:detail, :component_uuid => "")).not_to be_valid
    expect(FactoryGirl.build(:detail, :component_uuid => nil)).not_to be_valid
  end

  it "has a capability" do
    expect(detail.capability).not_to be_nil
    expect(detail.capability).not_to eq('')
    expect(FactoryGirl.build(:detail, :capability => "")).not_to be_valid
    expect(FactoryGirl.build(:detail, :capability => nil)).not_to be_valid
  end

  it "has a data type" do
    expect(detail.data_type).not_to be_nil
    expect(detail.data_type).not_to eq('')
    expect(FactoryGirl.build(:detail, :data_type => "")).not_to be_valid
    expect(FactoryGirl.build(:detail, :data_type => nil)).not_to be_valid
  end

  it "has a unit of measurement" do
    expect(detail.unit).not_to be_nil
    expect(detail.unit).not_to eq('')
    expect(FactoryGirl.build(:detail, :unit => "")).not_to be_valid
    expect(FactoryGirl.build(:detail, :unit => nil)).not_to be_valid
  end

  it "has a value" do
    expect(detail.value).not_to be_nil
    expect(detail.value).not_to eq('')
    expect(FactoryGirl.build(:detail, :value => "")).not_to be_valid
    expect(FactoryGirl.build(:detail, :value => nil)).not_to be_valid
  end

  it "belongs to an event" do
    expect(detail.event_id).not_to be_nil
    expect(detail.event_id).not_to eq('')
    expect(FactoryGirl.build(:detail, :event_id => "")).not_to be_valid
    expect(FactoryGirl.build(:detail, :event_id => nil)).not_to be_valid
  end

end
